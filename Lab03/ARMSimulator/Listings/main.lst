


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 THUMB
    3 00000000         ;AREA    DATA, ALIGN=2   
    4 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    5 00000000                 EXPORT           Start
    6 00000000                 ALIGN
    7 00000000         ;unlock 0x4C4F434B
    8 00000000         
    9 00000000         ;PF4 is SW1
   10 00000000         ;PF0 is SW2
   11 00000000         ;PF1 is RGB Red
   12 00000000         ;Enable Clock RCGCGPIO p338
   13 00000000         ;Set direction 1 is out 0 is in. GPIODIR
   14 00000000         ;DEN 
   15 00000000         ; 0x3FC
   16 00000000         
   17 00000000         ;GPIO Port B (APB): 0x4000.5000
   18 00000000         ;GPIO Port E (APB): 0x4002.4000
   19 00000000         
   20 00000000         
   21 00000000 E000E000 
                       sysTick equ              0xe000e000
   22 00000000         
   23 00000000 40005000 
                       port_B  equ              0x40005000  ;Port B
   24 00000000 40024000 
                       port_E  equ              0x40024000
   25 00000000 40006000 
                       port_C  equ              0x40006000
   26 00000000 40036000 
                       TMW0    equ              0x40036000
   27 00000000 400FE000 
                       RCGCTimer
                               equ              0x400FE000
   28 00000000         
   29 00000000         Start
   30 00000000 F24E 1008 
              F2C4 000F        mov32            R0, #0x400FE108 
                                                            ; Enable GPIO Clock
                                                            
   31 00000008 F04F 0132       mov              R1, #0x32
   32 0000000C 6001            str              R1, [R0]
   33 0000000E         
   34 0000000E         
   35 0000000E         
   36 0000000E         ;theoretical general purpose timers setup
   37 0000000E F24E 0000 
              F2C4 000F        mov32            r0, RCGCTimer
   38 00000016 F04F 0101       mov              r1, #0x1    ;for timer 0
   39 0000001A F8C0 165C       str              r1, [r0, #0x65c] ;enable clock 
                                                            for timerwide RCGCW
                                                            TIMER pg. 355
   40 0000001E F246 0000 
              F2C4 0003        mov32            r0, TMW0
   41 00000026 F04F 0100       mov              r1, #0x0
   42 0000002A 60C1            str              r1, [r0, #0x00c] 
                                                            ;turn off timer
   43 0000002C F04F 0104       mov              r1, #0x4



ARM Macro Assembler    Page 2 


   44 00000030 6001            str              r1, [r0]    ;32 bit wide timer
   45 00000032 F04F 0102       mov              r1, #0x2
   46 00000036 6041            str              r1, [r0, #0x004] ;set timer to 
                                                            periodic
   47 00000038 F644 41D5 
              F6C0 212F        mov32            r1, #0x0a2f4cd5 ;load value, ex
                                                            ample
   48 00000040 6281            str              r1, [r0, #0x028] ;write to set 
                                                            reload value, read 
                                                            to get current valu
                                                            e
   49 00000042 F04F 0101       mov              r1, #0x1
   50 00000046 60C1            str              r1, [r0, #0x00c]
   51 00000048 69C1            ldr              r1, [r0, #0x01c] ;poll this to 
                                                            check if done, 0th 
                                                            bit
   52 0000004A F04F 0101       mov              r1, #0x1
   53 0000004E 6241            str              r1, [r0, #0x024] ;store 1 to th
                                                            is to clear status(
                                                            done) pin, do this 
                                                            after polling
   54 00000050         
   55 00000050         
   56 00000050 F245 0000 
              F2C4 0000        mov32            R0, port_B  ;Port B
   57 00000058         ;mov R1, #0x4C4F434B
   58 00000058 F04F 0100       mov              R1, #0x0
   59 0000005C F8C0 1420       str              R1, [R0, #0x420] ;turn off alt 
                                                            function, may need 
                                                            unlock
   60 00000060 F04F 01FF       mov              R1,#0xFF
   61 00000064 F8C0 1400       str              R1,[R0,#0x400] 
                                                            ;Port B output 0-7
   62 00000068 F04F 01FF       mov              R1,#0xFF
   63 0000006C F8C0 151C       str              R1,[R0,#0x51C] 
                                                            ;Port B pin 0-7 on
   64 00000070         
   65 00000070         
   66 00000070 F244 0000 
              F2C4 0002        mov32            R0, port_E  ;Port E
   67 00000078 F04F 0100       mov              R1, #0x0
   68 0000007C F8C0 1420       str              R1, [R0, #0x420] ;turn off alt 
                                                            function, may need 
                                                            unlock
   69 00000080 F04F 0103       mov              R1,#0x03
   70 00000084 F8C0 1400       str              R1,[R0,#0x400] ;Port E output 0
                                                            -1, input 2-3
   71 00000088 F04F 010C       mov              R1, #0x0c
   72 0000008C F8C0 1510       str              R1, [R0,#0x510] ;pull up
   73 00000090 F04F 010F       mov              R1,#0x0f
   74 00000094 F8C0 151C       str              R1,[R0,#0x51C] 
                                                            ;Port E pin 0-3 on
   75 00000098         
   76 00000098         
   77 00000098         ;mov32 R0, port_C
   78 00000098         ;mov R1, #0x0
   79 00000098         ;str R1, [R0, #0x420] ;turn off alt function 
   80 00000098         ;mov R1, #0x0
   81 00000098         ;str R1, [R0, #0x400] ;Port C input 4-7



ARM Macro Assembler    Page 3 


   82 00000098         ;mov R1, #0xf0
   83 00000098         ;str R1, [R0,#0x510] ;pull up *****may be bug here******
                       
   84 00000098         ;mov R1, #0xf0
   85 00000098         ;str R1, [R0, #0x51c] ;Port C pin 4-7 on
   86 00000098         
   87 00000098         
   88 00000098         
   89 00000098 F04F 0900       mov              R9, #0x0    ;draw counter
   90 0000009C F04F 0B20       mov              R11, #0x20  ;player 1 position
   91 000000A0 F04F 0C10       mov              R12, #0x10  ;player 2 position
   92 000000A4 F04F 0200       mov              r2, #0      ;ready states of p1
                                                            [0] and p2[1]
   93 000000A8 F245 0000 
              F2C4 0000        mov32            r0, port_B
   94 000000B0 F04F 0130       mov              r1, #0x30
   95 000000B4 EA6F 0101       mvn              r1, r1
   96 000000B8 F8C0 13FC       str              r1, [r0, #0x3fc] ;turns on cent
                                                            er leds 
   97 000000BC F244 0000 
              F2C4 0002        mov32            r0, port_E
   98 000000C4 F04F 0103       mov              r1, #0x3
   99 000000C8 60C1            str              r1, [r0, #0xc]
  100 000000CA         
  101 000000CA         STANDBY
  102 000000CA         
  103 000000CA F245 0000 
              F2C4 0000        mov32            r0, port_B
  104 000000D2 F8D0 10C0       ldr              r1, [r0, #0xc0] ;load current v
                                                            alues of led 4,5
  105 000000D6 EA6F 0101       mvn              r1, r1
  106 000000DA EA6F 0302       mvn              r3, r2
  107 000000DE EA01 0183       and              r1, r3, lsl #2
  108 000000E2 F8C0 10C0       str              r1, [r0, #0xc0] ;set led 4,5 to
                                                             inverted value
  109 000000E6         
  110 000000E6         
  111 000000E6 F241 2300 
              F2C0 037A        mov32            r3, #0x7a1200 ; 0.5 Seconds
  112 000000EE F000 F814       bl               TIMER
  113 000000F2         
  114 000000F2         blinkDelay
  115 000000F2 F244 0000 
              F2C4 0002        mov32            r0, port_E
  116 000000FA 6B01            ldr              R1, [R0, #0x30] ;get current bu
                                                            ttons pressed
  117 000000FC F081 010C       eor              r1, #0xc
  118 00000100 EA42 0201       orr              r2, r1      ;refresh ready stat
                                                            es of players
  119 00000104 2A0C            cmp              r2, #0x0c   ;p1 and p2 are read
                                                            y, might be #0xc
  120 00000106 D04E            beq              START_GAME  ;start game
  121 00000108         
  122 00000108 F24E 0000 
              F2CE 0000        mov32            r0, sysTick
  123 00000110 6901            ldr              r1, [r0, #0x10]
  124 00000112 EBB3 4F11       cmp              r3, r1, lsr #16
  125 00000116 D1EC            bne              blinkDelay
  126 00000118 E7D7            b                STANDBY



ARM Macro Assembler    Page 4 


  127 0000011A         
  128 0000011A         TIMER
  129 0000011A B401            push             {r0}
  130 0000011C B402            push             {r1}
  131 0000011E         
  132 0000011E         ;******change from systick to general purpose timer
  133 0000011E F24E 0000 
              F2CE 0000        mov32            r0, sysTick
  134 00000126 F04F 0104       mov              r1, #4
  135 0000012A 6101            str              r1, [r0, #0x10] ;stop sysTick, 
                                                            use system clock
  136 0000012C         ;mov32 r1, #0x7a1200 ;7a1200
  137 0000012C 6143            str              r3, [r0, #0x14] ;set reset valu
                                                            e to r3
  138 0000012E 6183            str              r3, [r0, #0x18] ;set current va
                                                            lue to r3
  139 00000130 6901            ldr              r1, [r0, #0x10]
  140 00000132 F041 0101       orr              r1, #0x1
  141 00000136 6101            str              r1, [r0, #0x10] ;enable clock
  142 00000138 F04F 0301       mov              r3, #0x1
  143 0000013C         
  144 0000013C BC02            pop              {r1}
  145 0000013E BC01            pop              {r0}
  146 00000140 4770            bx               lr
  147 00000142         
  148 00000142         UPDATE_LED
  149 00000142 B401            push{r0}
  150 00000144 B402            push{r1}
  151 00000146 B404            push{r2}
  152 00000148 B408            push{r3}
  153 0000014A         
  154 0000014A EA4B 030C       orr              r3, r11, r12 
                                                            ;which leds turn on
                                                            
  155 0000014E EA6F 0303       mvn              r3, r3
  156 00000152 F245 0000 
              F2C4 0000        mov32            r0, port_B
  157 0000015A F8C0 33FC       str              r3, [r0, #0x3fc]
  158 0000015E EA4F 2313       lsr              r3, #8
  159 00000162 F244 0000 
              F2C4 0002        mov32            r0, port_E
  160 0000016A 60C3            str              r3, [r0, #0xc]
  161 0000016C         
  162 0000016C F24B 4100 
              F2C0 41C4        mov32            r1, #0x4c4b400 ;1 second
  163 00000174 F24E 0000 
              F2CE 0000        mov32            r0, sysTick
  164 0000017C 6983            ldr              r3, [r0, #0x18] ;load current s
                                                            ysTick
  165 0000017E 4498            add              r8, r3      ;add current sysTic
                                                            k value into r8
  166 00000180         
  167 00000180 BC08            pop{r3}
  168 00000182 BC04            pop{r2}
  169 00000184 BC02            pop{r1}
  170 00000186 BC01            pop{r0}
  171 00000188 4770            bx               lr
  172 0000018A         
  173 0000018A         RND12



ARM Macro Assembler    Page 5 


  174 0000018A B402            push{r1}
  175 0000018C         
  176 0000018C         ;mov32 r0, sysTick
  177 0000018C         ;ldr r3, [r0, #0x18] ;load current sysTick
  178 0000018C         ;ldr r2, [r0, #0x14] ;load reset sysTick value
  179 0000018C         ;udiv r3, r2 ;current/1sec = value 0-1
  180 0000018C         
  181 0000018C         ;mov r1, #0x4
  182 0000018C         ;mul r8, r1
  183 0000018C F242 4100 
              F2C0 01F4        mov32            r1, #0xf42400 ;1 second 16MHz
  184 00000194         looprnd
  185 00000194 4588            cmp              r8, r1      ;r8>1 sec?
  186 00000196 DD02            ble              endlooprnd
  187 00000198 EBA8 0801       sub              r8, r1      ;if (r8>1sec) r8-1 
                                                            sec
  188 0000019C E7FA            b                looprnd
  189 0000019E         endlooprnd
  190 0000019E EB01 0308       add              r3, r1, r8  ;add 1 second
  191 000001A2         ;mov32 r3, #0xf42400
  192 000001A2         ;cmp r3, #0xFFFFFF ;max value of systick timer
  193 000001A2         ;******SETUP General purpose Timer, systick is too small
                       ***********
  194 000001A2 BC02            pop{r1}
  195 000001A4 4770            bx               lr
  196 000001A6         
  197 000001A6         START_GAME
  198 000001A6 F245 0000 
              F2C4 0000        mov32            r0, port_B
  199 000001AE F04F 01CF       mov              r1, #0xcf   ; cf=1100 1111, tur
                                                            n on center led
  200 000001B2 F8C0 10C0       str              r1, [r0, #0xc0] ;load current v
                                                            alues of led 4,5
  201 000001B6         
  202 000001B6         Loop
  203 000001B6 F7FF FFE8       bl               RND12       ;get random value 1
                                                            -2 and store in r3
  204 000001BA F7FF FFAE       bl               TIMER       ;use value of r3 fr
                                                            om rnd12
  205 000001BE         WHILE2                               ;while(!timer.done)
                                                            
  206 000001BE F244 0000 
              F2C4 0002        mov32            r0, port_E
  207 000001C6 6B01            ldr              R1, [R0, #0x30] ;get current bu
                                                            ttons pressed
  208 000001C8 F081 010C       eor              r1, #0xc
  209 000001CC 2900            cmp              r1, #0x0000
  210 000001CE D1F2            bne              Loop        ;player pressed but
                                                            ton early
  211 000001D0         
  212 000001D0 F24E 0000 
              F2CE 0000        mov32            r0, sysTick
  213 000001D8 6901            ldr              r1, [r0, #0x10]
  214 000001DA EA4F 4111       lsr              r1, #16
  215 000001DE 428B            cmp              r3, r1      ;is timer done
  216 000001E0 D1ED            bne              WHILE2      ;end while(!timer.d
                                                            one)
  217 000001E2         
  218 000001E2 EA4F 0B4B       lsl              r11, #1     ;move p1 left 1



ARM Macro Assembler    Page 6 


  219 000001E6 EA4F 0C5C       lsr              r12, #1     ;move p2 right 1
  220 000001EA F7FF FFAA       bl               UPDATE_LED
  221 000001EE         
  222 000001EE         GET_FIRST_TURN
  223 000001EE F244 0000 
              F2C4 0002        mov32            r0, port_E
  224 000001F6 6B01            ldr              R1, [R0, #0x30] ;get current bu
                                                            ttons pressed
  225 000001F8 F081 010C       eor              r1, #0xc
  226 000001FC 2908            cmp              r1, #0x8
  227 000001FE D102            bne              CHECK_P2    ;player 1 button no
                                                            t pressed
  228 00000200 F000 F85D       bl               PLAYER1_FIRST
  229 00000204 E003            b                WHILE3
  230 00000206         CHECK_P2
  231 00000206 2904            cmp              r1, #0x4
  232 00000208 D1F1            bne              GET_FIRST_TURN ;recheck buttons
                                                            , p2 button not pre
                                                            ssed
  233 0000020A F000 F86F       bl               PLAYER2_FIRST
  234 0000020E         
  235 0000020E         WHILE3                               ;while(!timer.done)
                                                            
  236 0000020E         
  237 0000020E F244 0000 
              F2C4 0002        mov32            r0, port_E
  238 00000216 6A01            ldr              r1, [r0, #0x20] ;get button p1
  239 00000218 F081 0108       eor              r1, #0x8    ;inverse button, 1 
                                                            on 0 off
  240 0000021C EA4F 01D1       lsr              r1, #3      ;move p1 bit to fir
                                                            st position
  241 00000220 4551            cmp              r1, r10
  242 00000222 D106            bne              skipP1
  243 00000224         ;if(p1.pressed && playerturn ==p1)
  244 00000224 EA4F 0B5B       lsr              r11, #1     ;move p1 right
  245 00000228 F7FF FF8B       bl               UPDATE_LED
  246 0000022C F109 0901       add              r9, #1      ;draw++
  247 00000230 E7C1            b                Loop
  248 00000232         skipP1
  249 00000232 6901            ldr              r1, [r0, #0x10] ;get button p2
  250 00000234 F081 0104       eor              r1, #0x4    ;inverse button, 1 
                                                            on 0 off
  251 00000238 EA4F 0151       lsr              r1, #1      ;move p2 bit to sec
                                                            ond position
  252 0000023C 4551            cmp              r1, r10
  253 0000023E D106            bne              skipP2
  254 00000240         ;if(p2.pressed && playerturn ==p2)
  255 00000240 EA4F 0C4C       lsl              r12, #1     ;move p2 left
  256 00000244 F7FF FF7D       bl               UPDATE_LED
  257 00000248 F109 0901       add              r9, #1      ;draw++
  258 0000024C E7B3            b                Loop
  259 0000024E         skipP2                               ;no buttons pressed
                                                            
  260 0000024E         
  261 0000024E F24E 0000 
              F2CE 0000        mov32            r0, sysTick
  262 00000256 6901            ldr              r1, [r0, #0x10]
  263 00000258 EBB3 4F11       cmp              r3, r1, lsr #16 ;is timer done
  264 0000025C D1D7            bne              WHILE3



ARM Macro Assembler    Page 7 


  265 0000025E         
  266 0000025E F04F 0900       mov              r9, #0
  267 00000262         ;    mov32 r0, port_E
  268 00000262         ;    ldr r1, [r0, #0x10]
  269 00000262         ;    eor r1, #0x4
  270 00000262         ;    lsr r1, #2 
  271 00000262 F1BA 0F01       cmp              r10, #0x1
  272 00000266 D104            bne              p2Turn
  273 00000268 EA4F 0C4C       lsl              r12, #1     ;move p2 left
  274 0000026C F7FF FF69       bl               UPDATE_LED
  275 00000270 E004            b                checkWin
  276 00000272         p2Turn
  277 00000272 EA4F 0B5B       lsr              r11, #1     ;move p1 right 1
  278 00000276 F7FF FF64       bl               UPDATE_LED
  279 0000027A E7FF            b                checkWin
  280 0000027C         
  281 0000027C         checkWin
  282 0000027C F5BB 7F00       cmp              r11, #0x200 ;check if p1 on lef
                                                            t edge
  283 00000280 D003            beq              BLINK
  284 00000282 F1BC 0F01       cmp              r12, #0x1   ;check if p2 on rig
                                                            ht edge
  285 00000286 D000            beq              BLINK
  286 00000288 E795            b                Loop
  287 0000028A         
  288 0000028A         BLINK
  289 0000028A 465C            mov              r4, r11
  290 0000028C 4665            mov              r5, r12
  291 0000028E         blink1
  292 0000028E EA8B 0B04       eor              r11, r4     ;flip r11
  293 00000292 EA8C 0C05       eor              r12, r5     ;flip r12
  294 00000296 F7FF FF54       bl               UPDATE_LED
  295 0000029A F241 2300 
              F2C0 037A        mov32            r3, #0x7a1200 ;0.5 sec
  296 000002A2 B500            push{lr}
  297 000002A4 F7FF FF39       bl               TIMER       ;delay of 0.5 sec
  298 000002A8 F85D EB04       pop{lr}
  299 000002AC F24E 0000 
              F2CE 0000        mov32            r0, sysTick
  300 000002B4         blinkDelay1
  301 000002B4 6901            ldr              r1, [r0, #0x10]
  302 000002B6 EBB3 4F11       cmp              r3, r1, lsr #16
  303 000002BA D1FB            bne              blinkDelay1 ;delay of 0.5 sec
  304 000002BC E7E7            b                blink1      ;endlessly loop unt
                                                            il reset
  305 000002BE         
  306 000002BE         
  307 000002BE         PLAYER1_FIRST
  308 000002BE         
  309 000002BE EA4F 0B5B       lsr              r11, #1     ;move p1 right 1
  310 000002C2 B500            push{lr}
  311 000002C4 F7FF FF3D       bl               UPDATE_LED
  312 000002C8 F85D EB04       pop{lr}
  313 000002CC F04F 0A02       mov              r10, #0x2   ;wait on p2
  314 000002D0         ;*****store switch pins 0,1 in r4**********
  315 000002D0 F04F 0300       mov              r3, #0x0    ;dip switch value *
                                                            ***TODO, get did sw
                                                            itch values
  316 000002D4 B500            push{lr}



ARM Macro Assembler    Page 8 


  317 000002D6 F000 F820       bl               COMPUTE_PLAYER_DELAY
  318 000002DA F85D EB04       pop{lr}
  319 000002DE 462B            mov              r3, r5      ;store value r5 fro
                                                            m COMPUTE_PLAYER_DE
                                                            LAY into R3 for tim
                                                            er 
  320 000002E0 B500            push{lr}
  321 000002E2 F7FF FF1A       bl               TIMER
  322 000002E6 F85D EB04       pop{lr}
  323 000002EA 4770            bx               lr
  324 000002EC         
  325 000002EC         PLAYER2_FIRST
  326 000002EC         
  327 000002EC EA4F 0C4C       lsl              r12, #1     ;move p2 left 1
  328 000002F0 B500            push{lr}
  329 000002F2 F7FF FF26       bl               UPDATE_LED
  330 000002F6 F85D EB04       pop{lr}
  331 000002FA F04F 0A01       mov              r10, #0x1   ;wait on p1
  332 000002FE F04F 0300       mov              r3, #0x0    ;dip switch value *
                                                            ***TODO, get did sw
                                                            itch values
  333 00000302         ;**********store switch pins 2,3 in r3, use lsr #2******
                       *****
  334 00000302 B500            push{lr}
  335 00000304 F000 F809       bl               COMPUTE_PLAYER_DELAY
  336 00000308 F85D EB04       pop{lr}
  337 0000030C 462B            mov              r3, r5      ;store value r5 fro
                                                            m COMPUTE_PLAYER_DE
                                                            LAY into R3 for tim
                                                            er
  338 0000030E B500            push{lr}
  339 00000310 F7FF FF03       bl               TIMER
  340 00000314 F85D EB04       pop{lr}
  341 00000318 4770            bx               lr
  342 0000031A         
  343 0000031A         COMPUTE_PLAYER_DELAY
  344 0000031A B404            push{r2}
  345 0000031C         ;r3 is the current switch value
  346 0000031C         ;r9 is current draw number
  347 0000031C F04F 0250       mov              r2, #0x50   ; 80
  348 00000320 FB03 F302       mul              r3, r2      ;p.sn*80
  349 00000324 F44F 75A0       mov              r5, #0x140  ;320
  350 00000328 EBA5 0503       sub              r5, r3      ;r5=320 - 80*p.sn
  351 0000032C         
  352 0000032C F04F 0304       mov              r3, #0x4
  353 00000330 454B            cmp              r3, r9      ;if(4>=draws)
  354 00000332 DD00            ble              continue1   ;else r3=4
  355 00000334 464B            mov              r3, r9      ; if(4>=draws) r3=n
                                                            um draws
  356 00000336         continue1
  357 00000336 FA25 F503       lsr              r5, r3      ;left shift r5 by m
                                                            in(4,draws)
  358 0000033A         
  359 0000033A F643 6280 
              F2C0 0200        mov32            r2, #0x3e80 ;16,000
  360 00000342 FB05 F502       mul              r5, r2      ;value of r5 * 16,0
                                                            00 to get time in m
                                                            s
  361 00000346 BC04            pop{r2}



ARM Macro Assembler    Page 9 


  362 00000348 4770            bx               lr          ;END COMPUTE_PLAYER
                                                            _DELAY, return valu
                                                            e in r5
  363 0000034A         
  364 0000034A 00 00           ALIGN
  365 0000034C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\Keil_v5
\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\LM3S_DFP\1.1
.0\Device\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SE
TA 524" --predefine="_RTE_ SETA 1" --predefine="LM3S1968 SETA 1" --list=.\listi
ngs\main.lst ..\main.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 4 in file ..\main.asm
   Uses
      None
Comment: .text unused
BLINK 0000028A

Symbol: BLINK
   Definitions
      At line 288 in file ..\main.asm
   Uses
      At line 283 in file ..\main.asm
      At line 285 in file ..\main.asm

CHECK_P2 00000206

Symbol: CHECK_P2
   Definitions
      At line 230 in file ..\main.asm
   Uses
      At line 227 in file ..\main.asm
Comment: CHECK_P2 used once
COMPUTE_PLAYER_DELAY 0000031A

Symbol: COMPUTE_PLAYER_DELAY
   Definitions
      At line 343 in file ..\main.asm
   Uses
      At line 317 in file ..\main.asm
      At line 335 in file ..\main.asm

GET_FIRST_TURN 000001EE

Symbol: GET_FIRST_TURN
   Definitions
      At line 222 in file ..\main.asm
   Uses
      At line 232 in file ..\main.asm
Comment: GET_FIRST_TURN used once
Loop 000001B6

Symbol: Loop
   Definitions
      At line 202 in file ..\main.asm
   Uses
      At line 210 in file ..\main.asm
      At line 247 in file ..\main.asm
      At line 258 in file ..\main.asm
      At line 286 in file ..\main.asm

PLAYER1_FIRST 000002BE

Symbol: PLAYER1_FIRST
   Definitions
      At line 307 in file ..\main.asm
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 228 in file ..\main.asm
Comment: PLAYER1_FIRST used once
PLAYER2_FIRST 000002EC

Symbol: PLAYER2_FIRST
   Definitions
      At line 325 in file ..\main.asm
   Uses
      At line 233 in file ..\main.asm
Comment: PLAYER2_FIRST used once
RND12 0000018A

Symbol: RND12
   Definitions
      At line 173 in file ..\main.asm
   Uses
      At line 203 in file ..\main.asm
Comment: RND12 used once
STANDBY 000000CA

Symbol: STANDBY
   Definitions
      At line 101 in file ..\main.asm
   Uses
      At line 126 in file ..\main.asm
Comment: STANDBY used once
START_GAME 000001A6

Symbol: START_GAME
   Definitions
      At line 197 in file ..\main.asm
   Uses
      At line 120 in file ..\main.asm
Comment: START_GAME used once
Start 00000000

Symbol: Start
   Definitions
      At line 29 in file ..\main.asm
   Uses
      At line 5 in file ..\main.asm
Comment: Start used once
TIMER 0000011A

Symbol: TIMER
   Definitions
      At line 128 in file ..\main.asm
   Uses
      At line 112 in file ..\main.asm
      At line 204 in file ..\main.asm
      At line 297 in file ..\main.asm
      At line 321 in file ..\main.asm
      At line 339 in file ..\main.asm

UPDATE_LED 00000142

Symbol: UPDATE_LED
   Definitions
      At line 148 in file ..\main.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 220 in file ..\main.asm
      At line 245 in file ..\main.asm
      At line 256 in file ..\main.asm
      At line 274 in file ..\main.asm
      At line 278 in file ..\main.asm
      At line 294 in file ..\main.asm
      At line 311 in file ..\main.asm
      At line 329 in file ..\main.asm

WHILE2 000001BE

Symbol: WHILE2
   Definitions
      At line 205 in file ..\main.asm
   Uses
      At line 216 in file ..\main.asm
Comment: WHILE2 used once
WHILE3 0000020E

Symbol: WHILE3
   Definitions
      At line 235 in file ..\main.asm
   Uses
      At line 229 in file ..\main.asm
      At line 264 in file ..\main.asm

blink1 0000028E

Symbol: blink1
   Definitions
      At line 291 in file ..\main.asm
   Uses
      At line 304 in file ..\main.asm
Comment: blink1 used once
blinkDelay 000000F2

Symbol: blinkDelay
   Definitions
      At line 114 in file ..\main.asm
   Uses
      At line 125 in file ..\main.asm
Comment: blinkDelay used once
blinkDelay1 000002B4

Symbol: blinkDelay1
   Definitions
      At line 300 in file ..\main.asm
   Uses
      At line 303 in file ..\main.asm
Comment: blinkDelay1 used once
checkWin 0000027C

Symbol: checkWin
   Definitions
      At line 281 in file ..\main.asm
   Uses
      At line 275 in file ..\main.asm
      At line 279 in file ..\main.asm



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


continue1 00000336

Symbol: continue1
   Definitions
      At line 356 in file ..\main.asm
   Uses
      At line 354 in file ..\main.asm
Comment: continue1 used once
endlooprnd 0000019E

Symbol: endlooprnd
   Definitions
      At line 189 in file ..\main.asm
   Uses
      At line 186 in file ..\main.asm
Comment: endlooprnd used once
looprnd 00000194

Symbol: looprnd
   Definitions
      At line 184 in file ..\main.asm
   Uses
      At line 188 in file ..\main.asm
Comment: looprnd used once
p2Turn 00000272

Symbol: p2Turn
   Definitions
      At line 276 in file ..\main.asm
   Uses
      At line 272 in file ..\main.asm
Comment: p2Turn used once
skipP1 00000232

Symbol: skipP1
   Definitions
      At line 248 in file ..\main.asm
   Uses
      At line 242 in file ..\main.asm
Comment: skipP1 used once
skipP2 0000024E

Symbol: skipP2
   Definitions
      At line 259 in file ..\main.asm
   Uses
      At line 253 in file ..\main.asm
Comment: skipP2 used once
26 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

RCGCTimer 400FE000

Symbol: RCGCTimer
   Definitions
      At line 27 in file ..\main.asm
   Uses
      At line 37 in file ..\main.asm
Comment: RCGCTimer used once
TMW0 40036000

Symbol: TMW0
   Definitions
      At line 26 in file ..\main.asm
   Uses
      At line 40 in file ..\main.asm
Comment: TMW0 used once
port_B 40005000

Symbol: port_B
   Definitions
      At line 23 in file ..\main.asm
   Uses
      At line 56 in file ..\main.asm
      At line 93 in file ..\main.asm
      At line 103 in file ..\main.asm
      At line 156 in file ..\main.asm
      At line 198 in file ..\main.asm

port_C 40006000

Symbol: port_C
   Definitions
      At line 25 in file ..\main.asm
   Uses
      None
Comment: port_C unused
port_E 40024000

Symbol: port_E
   Definitions
      At line 24 in file ..\main.asm
   Uses
      At line 66 in file ..\main.asm
      At line 97 in file ..\main.asm
      At line 115 in file ..\main.asm
      At line 159 in file ..\main.asm
      At line 206 in file ..\main.asm
      At line 223 in file ..\main.asm
      At line 237 in file ..\main.asm

sysTick E000E000

Symbol: sysTick
   Definitions
      At line 21 in file ..\main.asm
   Uses
      At line 122 in file ..\main.asm
      At line 133 in file ..\main.asm
      At line 163 in file ..\main.asm



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 212 in file ..\main.asm
      At line 261 in file ..\main.asm
      At line 299 in file ..\main.asm

6 symbols
366 symbols in table
